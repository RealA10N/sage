var searchIndex = JSON.parse('{\
"sage":{"doc":"The Sage Programming Language","t":[17,17,17,0,0,0,0,0,0,2,8,2,2,2,2,2,2,4,2,2,2,2,2,2,13,13,13,13,13,11,11,11,11,11,0,11,11,11,11,11,0,11,10,11,0,10,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,17,13,17,17,17,17,17,17,13,4,13,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,3,13,13,4,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,3,13,13,13,4,13,13,13,13,13,13,3,8,13,8,13,13,13,13,13,13,4,8,4,13,3,13,13,13,13,13,13,13,13,3,13,4,4,13,13,8,8,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,3,13,13,13,13,3,4,13,13,13,13,13,8,13,13,3,13,13,13,13,13,13,13,13,8,13,13,13,13,4,8,13,13,8,13,13,13,13,13,13,13,13,13,11,11,11,11,12,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,5,5,8,8,11,11,11,11,0,10,10,10,11,10,10,10,10,11,11,11,11,11,10,10,10,11,11,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,13,13,13,13,13,13,3,4,13,3,13,13,8,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,3,4,3,13,13,13,3,13,13,13,8,13,13,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12],"n":["LOGO","LOGO_WITH_COLOR","NULL","asm","io","lir","parse","targets","vm","A","AssemblyProgram","B","C","CoreOp","CoreProgram","D","E","Error","F","FP","Location","SP","StandardOp","StandardProgram","UndefinedLabel","Unexpected","Unmatched","UnsupportedInstruction","VirtualMachineError","borrow","borrow_mut","clone","clone_into","comment","core","eq","fmt","from","from","into","location","ne","op","partial_cmp","std","std_op","to_owned","try_from","try_into","type_id","0","0","0","0","0","1","1","1","0","Add","And","Array","BitwiseAnd","BitwiseNand","BitwiseNot","BitwiseOr","BitwiseXor","Call","CallLabel","Comment","Compare","Copy","CoreOp","CoreProgram","Dec","Div","DivRem","Else","End","Fn","Get","GetAddress","If","Inc","Index","IsEqual","IsGreater","IsGreaterEqual","IsLess","IsLessEqual","IsNotEqual","Many","Move","Mul","Neg","Next","Not","Or","Pop","PopFrom","Prev","Push","PushTo","Put","Rem","Return","Set","SetLabel","Sub","Swap","While","assemble","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","fmt","fmt","fmt","fmt","from","from","hash","hash","into","into","ne","ne","op","partial_cmp","partial_cmp","push_string","put_string","stack_alloc_cells","stack_alloc_string","std_op","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","1","a","a","a","a","a","a","a","addr","b","b","b","b","b","b","b","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","offset","size","size","size","sp","sp","src","src","src","src","src","src","src","src","src","src","src","src","src","src","src","src","src","vals","A","Address","B","C","D","E","F","FP","Indirect","Location","Offset","SP","acos","add","add_float","alloc","and","asin","atan","bitwise_nand","borrow","borrow_mut","clone","clone_into","cmp","copy_address_to","copy_to","cos","dec","deref","div","div_float","eq","fmt","fmt","free","from","from","get","hash","inc","into","is_equal","is_greater_or_equal_to","is_greater_than","is_greater_than_float","is_less_or_equal_to","is_less_than","is_less_than_float","is_not_equal","mul","mul_float","ne","next","not","offset","or","partial_cmp","peek","poke","pop_from","pow_float","prev","push_to","put","rem","rem_float","restore_from","save_to","set","set_float","sin","sub","sub_float","tan","to","to_float","to_int","to_owned","to_string","try_from","try_into","type_id","whole_int","0","0","0","1","0","ACos","ASin","ATan","Add","Alloc","CoreOp","Cos","Div","Free","IsGreater","IsLess","Mul","Neg","Peek","Poke","Pow","Rem","Set","Sin","Sqrt","StandardOp","StandardProgram","Sub","Tan","ToFloat","ToInt","assemble","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","from","into","into","ne","ne","op","partial_cmp","partial_cmp","std_op","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","a","a","b","b","dst","dst","dst","dst","dst","dst","dst","dst","src","src","src","src","src","src","0","Accelerometer","Altimeter","AnalogPin","AnalogPin","Axis","Barometer","Bell","Black","Blower","Blue","BlueLight","Brightness","Brightness","Button","Buzzer","Channel","ClearDisplay","Clock","Color","Compass","ConductivitySensor","Cooler","Custom","Custom","Cyan","DPad","DepthSensor","DigitalPin","DigitalPin","Direction","Down","Fan","FlowSensor","Green","GreenLight","Gyroscope","Heater","Humidity","Input","InputMode","JoyStick","Keyboard","Left","Magenta","Magnetometer","Microphone","MotorSpeed","MoveCursorDown","MoveCursorLeft","MoveCursorRight","MoveCursorUp","Note","Odometer","Orange","Output","OutputMode","PHSensor","Position","Pressure","PressureGauge","PrinterChar","PrinterFloat","PrinterInt","Proximity","Pump","RGB","RainGauge","Random","Red","RedLight","Right","Servo","SetCursorChar","SetCursorColumn","SetCursorPixel","SetCursorRow","Solenoid","SpeakerFrequency","SpeakerVolume","Speedometer","StderrChar","StderrFloat","StderrInt","StdinChar","StdinFloat","StdinInt","StdoutChar","StdoutFloat","StdoutInt","StepperMotor","Temperature","Thermometer","UVSensor","Up","UpdateDisplay","Valve","VolumeSensor","WeightSensor","White","WindDirection","WindSpeed","X","Y","Yellow","Z","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","channel","clock","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","mode","mode","ne","ne","ne","ne","ne","ne","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","random","stderr_char","stderr_float","stderr_int","stdin_char","stdin_float","stdin_int","stdout_char","stdout_float","stdout_int","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","1","2","0","0","0","0","0","0","0","0","0","0","0","0","Add","And","Any","Apply","ApplyNonProc","Arithmetic","Array","Array","Array","As","As","AssemblyError","Assign","AssignOp","AssignOp","BinaryOp","BinaryOp","Bool","Bool","Cell","Char","Char","Comparison","Compile","ConstExpr","ConstExpr","CoreBuiltin","CoreBuiltin","Debug","Deref","DerefMut","DerefNonPointer","Display","Divide","Enum","Env","Equal","Error","Expr","Float","Float","GetSize","GetType","GreaterThan","GreaterThanOrEqual","If","Index","Int","Int","InvalidAs","InvalidAssignOp","InvalidAssignOpTypes","InvalidBinaryOp","InvalidBinaryOpTypes","InvalidIndex","InvalidRefer","InvalidTernaryOp","InvalidTernaryOpTypes","InvalidUnaryOp","InvalidUnaryOpTypes","LessThan","LessThanOrEqual","Let","LetConst","LetConsts","LetProc","LetProcs","LetType","LetTypes","LetVar","LetVars","Many","Member","MemberNotFound","MismatchedTypes","Multiply","NegativeArrayLength","Never","NonIntegralConst","NonSymbol","None","None","Not","NotEqual","Null","Of","Or","Pointer","Power","Proc","Proc","Procedure","Put","RecursionDepthConst","RecursionDepthTypeEquality","Refer","Remainder","Return","Simplify","SizeOfExpr","SizeOfType","StandardBuiltin","StandardBuiltin","Struct","Struct","Struct","Subtract","Symbol","Symbol","SymbolNotDefined","TernaryOp","TernaryOp","Tuple","Tuple","Tuple","Type","TypeCheck","TypeNotDefined","TypeOf","UnaryOp","UnaryOp","Union","Union","Union","Unit","UnsizedType","VariantNotFound","When","While","add","and","app","app","args","args","as_bool","as_int","as_symbol","as_type","as_type","assign_op","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply_exprs","can_apply_exprs","can_apply_exprs","can_apply_exprs","can_apply_exprs","can_apply_exprs","can_apply_exprs","can_apply_exprs","can_cast_to","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compile","compile","compile","compile","compile","compile","compile","compile","compile","compile","compile","compile_expr","compile_expr","compile_expr","compile_expr","compile_expr","compile_expr","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compiled","contains_symbol","debug","default","define_args","define_const","define_proc","define_type","define_var","deref","deref_mut","display","display","display","display","display","display","display","display","display","div","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equals","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","field","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","ge","get_args_size","get_const","get_name","get_proc","get_size","get_size","get_size_checked","get_size_checked","get_type","get_type","get_type","get_type_checked","get_type_checked","get_type_checked","get_type_checked","get_type_checked","get_type_checked","get_var","gt","has_proc","idx","if_then","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","le","let_const","let_consts","let_proc","let_procs","let_type","let_types","let_var","let_vars","lt","mul","name","name","ne","ne","ne","ne","ne","neq","new","new","new_scope","not","or","pow","proc","push_label","push_proc","refer","rem","ret","ret","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","simplify","simplify_checked","simplify_checked","simplify_checked","size_of","structure","sub","substitute","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unop","var","variant_index","while_loop","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","2","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","1","1","1","1","2","2","2","2","2","2","2","3","3","expected","expr","found","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","2","2","2","2","2","2","2","2","2","2","3","3","0","0","0","0","0","0","0","0","0","0","1","1","1","1","2","parse_asm","parse_lir","parse_vm","Architecture","CompiledTarget","build_core","build_op","build_std","build_std_op","c","declare_proc","end","get","indentation","name","op","peek","poke","post_funs","postlude","postop","pre_funs","prelude","put","std_op","supports_floats","supports_input","supports_output","version","C","borrow","borrow_mut","declare_proc","end","from","get","into","name","op","peek","poke","post_funs","postlude","postop","prelude","put","std_op","supports_floats","try_from","try_into","type_id","version","0","0","ACos","ASin","ATan","Add","Add","Alloc","BitwiseNand","Call","Comment","CoreInterpreter","CoreOp","CoreOp","CoreProgram","Cos","Deref","Device","Div","Div","Else","End","Error","ExpectedCore","Free","Function","Get","If","Index","IsNonNegative","IsNonNegative","Move","Mul","Mul","Peek","Poke","Pow","Put","Refer","Rem","Rem","Restore","Return","Save","Set","Set","Sin","StandardDevice","StandardInterpreter","StandardOp","StandardProgram","Sub","Sub","Tan","TestingDevice","ToFloat","ToInt","UnsupportedInstruction","VirtualMachineProgram","Where","While","as_float","as_int","begin_else","begin_function","begin_if","begin_while","bitwise_nand","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","code","code","code","comment","default","default","default","default","default","deref","end","eq","eq","eq","eq","eq","flatten","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get","get","get","get","get_functions","get_functions","get_main","get_main","get_main_and_functions","get_main_and_functions","hash","hash","index","input","into","into","into","into","into","into","into","into","into","is_non_negative","move_pointer","ne","ne","ne","ne","ne","new","new","new","new_raw","op","op","op","output","output_str","output_vals","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","peek","peek","peek","poke","poke","poke","put","put","put","put","refer","restore","ret","run","run","save","set_register","std_op","std_op","std_op","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","where_is_pointer","0","0","0","0","0","0","0","0","0"],"q":["sage","","","","","","","","","sage::asm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sage::asm::Error","","","","","","","","sage::asm::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sage::asm::core::CoreOp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sage::asm::location","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sage::asm::location::Location","","","","sage::asm::std","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sage::asm::std::StandardOp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sage::iosage::io::Color","","","sage::io::InputMode","","","","","","","","sage::io::OutputMode","","","sage::lirsage::lir::ConstExpr","","","","","","","","","","","","","","","","","","","","","sage::lir::Error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sage::lir::Expr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sage::lir::Type","","","","","","","","","","","","","","","sage::parse","","","sage::targets","","","","","","","","","","","","","","","","","","","","","","","","","","sage::targets::c","","","","","","","","","","","","","","","","","","","","","","","sage::vmsage::vm::CoreOp","","","","","sage::vm::Error","","sage::vm::StandardOp",""],"d":["The UNICODE character art for the logo of the language.","The UNICODE character art for the logo of the language, …","The value of the NULL pointer constant.","Assembly Module","","LIR (Low Intermediate Representation) Module","Parsing Module","Targets Module","Virtual Machine Module","","A frontend to both the <code>CoreProgram</code> and <code>StandardProgram</code> …","","","","","","","An error generated by assembling some assembly language …","","","","","","","","","","","","","","","","","Core Assembly Variant","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Assembly Memory Location","","","","Standard Assembly Variant","","","","","","","","","","","","","","","Add an integer value from a source location to a …","Logical “and” a destination with a source value.","Store a list of values at a source location. Then, store …","","","","","","Get a value in memory and call it as a label ID.","Call a function with a given label.","","Store the comparison of “a” and “b” in a …","Copy a number of cells from a source referenced location …","A core instruction of the assembly language. These are …","A program composed of core instructions, which can be …","Decrement the integer value of a location.","Divide a destination location by a source value.","Divide a destination location by a source value. Store the …","Add an “else” clause to an “if the value is not zero…","Terminate a function declaration, a while loop, an if …","Declare a new label.","Get a value from the input device / interface and store it …","Get the address of a location, and store it in a …","Begin an “if the value is not zero” statement over a …","Increment the integer value of a location.","Get the address of a location indexed by an offset stored …","Perform dst = a == b.","Perform dst = a &gt; b.","Perform dst = a &gt;= b.","Perform dst = a &lt; b.","Perform dst = a &lt;= b.","Perform dst = a != b.","","Copy a value from a source location to a destination …","Multiply a destination location by a source value.","Negate an integer.","Make this pointer point to the next cell (or the nth next …","Replace a value in memory with its boolean complement.","Logical “or” a destination with a source value.","Pop a number of cells from the stack and store it in a …","Pop a number of cells from a specified stack and store it …","Make this pointer point to the previous cell (or the nth …","Push a number of cells starting at a memory location on …","Push a number of cells starting at a memory location onto …","Put a value from a source register to the output device / …","Store the remainder of the destination modulus the source …","Return from the current function.","Set the value of a register, or any location in memory, to …","Set the value of a register, or any location in memory, to …","Subtract a source integer value from a destination …","Swap the values of two locations.","Begin a “while the value is not zero” loop over a …","Assemble a program of core assembly instructions into the …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Put a string literal as UTF-8 to the output device.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The “A” general purpose register.","A fixed position in the tape (a constant address known at …","The “B” general purpose register.","The “C” general purpose register.","The “D” general purpose register.","The “E” general purpose register.","The “F” general purpose register.","The frame pointer register.","Use the value of a cell on the tape as an address. For …","A location in memory (on the tape of the virtual machine).","Go to a position in memory, and then move the pointer …","The stack pointer register.","","This cell += source cell.","This cell += source cell.","Read the value of this cell, allocate that number of …","Perform boolean and on the value of this cell and a source …","","","Perform bitwise-nand on this cell and a source cell.","","","","","","Copy the address of this location to another location.","Store the value of this cell into another cell.","","Decrement the value of this location.","Get the location of the value pointed to by this location.","This cell /= source cell.","This cell /= source cell.","","","","Free the pointer stored in this cell, and set the value to …","Move the pointer from this location.","Returns the argument unchanged.","","","Increment the value of this location.","Calls <code>U::from(self)</code>.","","dst = this cell &gt;= source cell.","dst = this cell &gt; source cell.","dst = this cell &gt;= source cell.","dst = this cell &lt;= source cell.","dst = this cell &lt; source cell.","dst = this cell &lt; source cell.","","This cell *= source cell.","This cell *= source cell.","","Take the pointer value of this location, and make it point …","If this cell is non-zero, then the value of this location …","Get the location offset by a constant number of cells from …","Perform boolean or on the value of this cell and a source …","","","","Pop the top item off a given stack and store it in this …","This cell **= source cell.","Take the pointer value of this location, and make it point …","Push the value of this location to a given stack.","","This cell %= source cell.","This cell %= source cell.","Restore the value from this location into the virtual …","Save the value of the virtual machine’s register to this …","This cell = a constant value.","This cell = a constant floating point value. This requires …","","This cell -= source cell.","This cell -= source cell.","","Move the pointer to this location.","","","","","","","","Take the value at this location. If it is a whole number …","","","","","","","","","","","Execute a core instruction.","","","","Perform dst = a &gt; b.","Perform dst = a &lt; b.","","","","","","","","","","A standard instruction of the assembly language. These are …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Input from an accelerometer (in meters per second per …","Input from altitude sensor (in meters)","Electrical device input modes (These should typically be …","Electrical device output modes Set the voltage of a given …","The different axes an input or output might use.","Input from a barometer (pressure in atmospheres)","Ring a bell (in hertz)","Black","Set the pressure of a given blower (in atmospheres)","Blue","Blue light intensity (in lux)","Input from a light sensor (in lux)","Lighting device output modes Set the brightness of a given …","Input from a button (0=not pressed, 1=pressed)","Sound output modes Ring a given buzzer (in hertz)","The channel to use for a given I/O mode.","Clear the display","Physical sensor input modes (These should typically be …","The different output colors a program might use.","Input from a compass (degrees)","Input from a conductivity sensor (in siemens per meter)","Turn a cooler on or off (0=off, 1=on)","Custom output modes A custom input mode (for use with a …","Custom output modes A custom output mode (for use with a …","Cyan","User input modes (These should typically be used for games …","Input from depth sensor (in meters)","Input from a digital input (0=low, 1=high)","Set the state of a given digital output (0=low, 1=high)","The different directions a D-Pad a might use.","","Turn a fan on or off (0=off, 1=on)","Input from a flow sensor (in liters per second)","Green","Green light intensity (in lux)","Input from a gyroscope (in degrees per second) around a …","Turn a heater on or off (0=off, 1=on)","Input from a humidity sensor (in percent)","An input source for a program.","The different types of input modes a program might use.","Input from a JoyStick the degree of displacement in a …","Input from keyboard (ASCII character)","","Magenta","Input from a magnetometer (in teslas) in a given axis","Input from a microphone (frequency in hertz)","Set the speed of a given motor (in revolutions per minute)","Move the cursor down on the display","Move the cursor left on the display","Move the cursor right on the display","Move the cursor up on the display","Play a given note (in hertz)","Input from an odometer (in meters)","Orange","An output destination for a program.","The different types of output modes a program might use.","Input from a pH sensor (in pH)","Input from a position sensor in a given axis (x, y, z)","Set the pressure of a given vacuum/pressurizer …","Engineering / Science sensor input modes Input from a …","Alternative output modes for standard output Printer …","Printer (float)","Printer (integer)","Input from a distance sensor (in meters)","Set the pressure of a given pump (in atmospheres)","RGB    ","Input from a rain gauge (in millimeters)","Special input modes A random number","Red","Environment sensor input modes (These should typically be …","","Set the position of a given servo (in radians)","Write a character to the display","Set the cursor column on the display","Set the color of a given pixel on the display","Set the cursor row on the display","Set the polarity of a solenoid (0=off, 1=on)","Set the frequency of a given speaker (in hertz)","Set the volume of a given speaker (in percent)","Navigation input modes (These should typically be …","Standard error (ASCII character)","Standard error (float)","Standard error (integer)","Standard input modes (The standard interface is typically …","Standard input (float)","Standard input (integer)","Standard output modes Standard output (ASCII character)","Standard output (float)","Standard output (integer)","Robotics device output modes Set the position of a given …","Set the temperature of a given heating/cooling device …","Input from a thermometer (degrees K)","Input from a UV sensor (in watts per square meter)","","Display output modes Update the display","Set the position of a given valve (0=closed, 1=open)","Input from a volume sensor (in liters)","Input from a weight sensor (in kilograms)","White","Input from a wind direction sensor (in degrees)","Input from a wind speed sensor (in meters per second)","","","Yellow","","","","","","","","","","","","","","","","","","The channel to use for the input.","The channel to use for the output.","The time (in seconds) since the program started","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The mode of the input.","The mode of the output.","","","","","","","Create a new input source.","Create a new output destination.","","","","","","","","","A random number","Output to STDERR (ASCII character)","Output to STDERR (float)","Output to STDERR (integer)","Input from STDIN (ASCII character)","Input from STDIN (float)","Input from STDIN (integer)","Output to STDOUT (ASCII character)","Output to STDOUT (float)","Output to STDOUT (integer)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A boolean “And” operation between two values.","A type reserved by the compiler. This type is equal to any …","Apply a function with some arguments.","Tried to apply a non-procedure to some arguments.","An arithmetic operation.","An array of constant values.","An array of expressions.","An array of a given type, with a constant size.","Cast a constant expression to another type.","Cast an expression to another type.","An error caused by trying to assemble invalid code …","An assignment operation. This is used to implement …","A trait used to implemented an assignment operation.","Perform an assignment operation on two expressions.","A trait used to implement a binary operation.","Perform a binary operation on two expressions.","A constant boolean value.","The type of a boolean value.","The type of the most basic unit of memory.","A constant chararacter.","The type of a character.","A comparison operation between two values.","A trait which allows an LIR expression to be compiled to …","A compiletime expression.","A constant expression.","A builtin pseudo-procedure implemented in the core …","A builtin implemented in handwritten core assembly.","","Dereference this expression (i.e. get the value it points …","Store an expression to an address (a pointer).","Tried to dereference a non-pointer.","","","An enumeration of a list of possible named values. A …","An environment under which expressions and types are …","","An LIR compilation error.","TODO: Add variants for <code>LetProc</code>, <code>LetVar</code>, etc. to support …","A constant floating point value.","The floating-point number type.","Get the size of something in memory (number of cells).","Get the type associated with a value under a given …","","","An if-then-else expression.","Index an array or pointer with an expression that …","A constant integer value.","The integer type.","Invalid type casting expression.","Invalid assignment operation (assign, add_assign, …","Invalid assign op types (incorrect types).","Invalid binary operation (add, subtract, and, or) …","Invalid binary op types (incorrect types).","Invalid <code>Index</code> expression (incorrect types).","Invalid <code>Refer</code> expression. The compiler was not able to …","Invalid ternary operation (if) expression (incorrect …","Invalid ternary op types (incorrect types).","Invalid unary operation (negate, not) expression …","Invalid unary op types (incorrect types).","","","Bind a type to a name in a temporary scope.","A <code>const</code> binding expression. Declare a constant under a new …","A <code>const</code> binding expression. Declare multiple constants …","A <code>proc</code> binding expression. Declare a procedure under a new …","A <code>proc</code> binding expression. Declare multiple procedures …","A <code>type</code> binding expression. Declare a type under a new …","A <code>type</code> binding expression. Declare multiple types under a …","A <code>let</code> binding expression. Declare a variable under a new …","A <code>let</code> binding expression. Declare multiple variables under …","A block of expressions. The last expression in the block …","Get a field or member from a structure, union, or tuple. …","Tried to access an undefined member of a tuple, struct, or …","Mismatched types","","Tried to create an array with a negative length.","The type of an expression that will never return, or doesn…","Got another type when expecting an integer, bool, or char.","Expected a symbol, but got something else.","The unit, or “void” instance.","The type of void expressions.","A boolean “Not” operation on a value.","","The null pointer constant.","A constant enum variant.","A boolean “Or” operation between two values.","A pointer to another type.","","A procedure.","A procedure with a list of parameters and a return type.","A procedure of LIR code which can be applied to a list of …","Print a value to a given output.","Recursion depth exceeded when trying to evaluate a …","Recursion depth exceeded when trying to confirm a type’s …","Reference this expression (i.e. get a pointer to it).","","Return a value from a function.","Simplify an expression while maintaining structural …","Get the size of an expression’s type (in cells) as a …","Get the size of a type (in cells) as a constant int.","A builtin pseudo-procedure implemented in the standard …","A builtin implemented in handwritten standard assembly.","A structure of constant values.","A structure of fields to expressions.","A tuple with named members. This is a product type.","","A named constant.","A named type.","A symbol was used, but not defined.","A trait used to implement a ternary operation.","Perform a ternary operation on three expressions.","A tuple of constant values.","A tuple of expressions.","A heterogenous collection of types. This is a product type.","The representation of a type in the LIR type system.","A trait used to enforce type checking.","A type was used, but not defined.","Get the type of an expression. (as an array of chars)","A trait used to implement a unary operation.","Perform a unary operation on two expressions.","A union of constant values.","A union: a collection of named fields. The <code>Type</code> value is …","A union of a list of possible types mapped to named …","This type is identified by its name. Most types are …","Tried to instantiate a type that cannot be sized. This is …","The variant of an enum is not defined.","A constant, compile time if-then-else expression.","Create a while loop: while the first expression evaluates …","Add this expression to another.","Logical and this expression with another.","Apply this procedure or builtin to a list of expressions …","Apply this expression as a procedure to some arguments.","The arguments of the builtin. These will be typechecked …","The arguments of the builtin. These will be typechecked …","Try to get this constant expression as a boolean value.","Try to get this constant expression as an integer.","Try to get this constant expression as a symbol (like in …","Cast an expression as another type.","Cast an expression as another type.","Perform an AssignOp on this expression.","The list of assembly instructions to be pasted into the …","The list of assembly instructions to be pasted into the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if the operation can be applied to the given types.","Checks if the operation can be applied to the given type.","Checks if the operation can be applied to the given types.","Checks if the operation can be applied to the given types.","Can this binary operation be applied to the given types?","Can this binary operation be applied to the given types?","Can this unary operation be applied to the given type?","Can this binary operation be applied to the given types?","Can this binary operation be applied to the given types?","Can this binary operation be applied to the given types?","Can this unary operation be applied to the given type?","Checks if the operation can be applied to the given …","Checks if the operation can be applied to the given …","Checks if the operation can be applied to the given …","Checks if the operation can be applied to the given …","Checks if the operation can be applied to the given …","Checks if the operation can be applied to the given …","Checks if the operation can be applied to the given …","Checks if the operation can be applied to the given …","Can this type be cast to another type?","","","","","","","","","","","","","","","","Clones the operation into a boxed trait object.","Clones the operation into a boxed trait object.","Clones the operation into a boxed trait object.","Clones the operation into a boxed trait object.","","","Clone this operation into a box.","Clone this operation into a trait object.","Clone this binary operation into a box.","Clone this operation into a box.","Clone this operation into a box.","","","","","","","","","","","","","","","","Compiles the operation on the given expressions.","Compiles the operation on the given expressions.","Compiles the operation on the given expression.","Compiles the operation on the given expression.","Compiles the operation on the given expressions.","Compiles the operation on the given expressions.","Compiles the operation on the given expressions.","Compiles the operation on the given expressions.","Compile the expression into an assembly program.","Compile the expression into an assembly program.","Compile the assignment operation.","","","","","","","Compiles the operation on the given types. (Generates the …","Compiles the operation on the given type. (Generates the …","Compiles the operation on the given types. (Generates the …","Compiles the operation on the given types. (Generates the …","Compile the binary operation.","Compile the binary operation.","Compile the unary operation.","Compile the assignment operation.","Compile the binary operation.","Compile the binary operation.","Compile the unary operation.","Has this procedure been compiled yet?","Does this type contain a symbol with the given name? This …","","","Define the arguments for the current scope (if this is a …","Define a constant with a given name under this environment.","Define a procedure with a given name under this …","Define a type with a given name under this environment.","Define a variable in the current scope. This will …","Dereference this expression (i.e. get the value it points …","Dereference this expression (i.e. get the value it points …","Formats the operation for display.","Formats the operation for display.","Formats the operation for display.","Formats the operation for display.","Formats the operation for display.","Formats the operation for display.","Formats the operation for display.","Formats the operation for display.","","Divide this expression by another.","","","","","","","","Is this expression greater than another?","","","","Are two types structurally equal?","Evaluates the operation on the given constant expressions.","Evaluates the operation on the given constant expression.","Evaluates the operation on the given constant expressions.","Evaluates the operation on the given constant expressions.","Evaluate this constant expression at compile time, and get …","Evaluate this binary operation on the given constant …","Evaluate this binary operation on the given constant …","Evaluate this unary operation on the given constant values.","Evaluate this binary operation on the given constant …","Evaluate this binary operation on the given constant …","Evaluate this binary operation on the given constant …","Evaluate this unary operation on the given constant values.","Get a field from a structure, union, or tuple.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Is this expression greater than or equal to another?","Get a variable’s size, in cells.","Get a constant definition from this environment.","Get the mangled name of the procedure. The procedure’s …","Get a procedure definition from this environment.","Get the size of something in memory (number of cells).","Get the size of something in memory (number of cells).","Get the size of something in memory, but limit the number …","","Get the type associated with a value under a given …","Get the type associated with a value under a given …","Get a type definition from this environment.","Get the type of a value under a given environment and check","","","","","","Get a variable’s type and its offset from the frame …","Is this expression greater than another?","Does this environment have a procedure with the given name?","Index an array or pointer with an expression that …","Create an if-then-else statement with this expression as …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is this expression less than or equal to another?","Create a <code>let</code> binding for a constant expression.","Create several <code>const</code> bindings at onces.","Create a <code>proc</code> binding for a procedure.","Create several <code>proc</code> bindings at onces.","Create a <code>let</code> binding for an type.","Create several <code>type</code> bindings at onces.","Create a <code>let</code> binding for an expression.","Create a <code>let</code> binding for an expression, and define …","Is this expression less than another?","Multiply this expression by another.","The name of the builtin. This isn’t used in compilation, …","The name of the builtin. This isn’t used in compilation, …","","","","","","Is this expression greater than or equal to another?","Construct a new procedure with a given list of arguments …","Create a new assignment operation.","Create a copy of the current environment but without any …","Logical not this expression.","Logical or this expression with another.","Get the power of this expression to another.","Construct a procedure.","Push this procedure’s label to the stack.","Push a procedure defined in the environment onto the stack.","Reference this expression (i.e. get a pointer to it).","Get the remainder of this expression divided by another.","The return value the builtin will leave on the stack after …","The return value the builtin will leave on the stack after …","Gets the type of the operation on the given expressions.","Gets the type of the operation on the given expressions.","Gets the type of the operation on the given expression.","Gets the type of the operation on the given expression.","Gets the type of the operation on the given expressions.","Gets the type of the operation on the given expressions.","Gets the type of the operation on the given expressions.","Gets the type of the operation on the given expressions.","Get the type of the result of applying this binary …","Get the type of the result of applying this binary …","Get the type of the result of applying this unary …","Get the type of the result of applying this binary …","Get the type of the result of applying this binary …","Get the type of the result of applying this binary …","Get the type of the result of applying this unary …","Simplify an expression while maintaining structural …","Simplify an expression while maintaining structural …","","","Get the size of an expression.","Create a structure of fields to expressions.","Subtract an expression from this expression.","Substitute all occurences of a symbol with another type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type check the expression.","Typechecks the operation on the given expressions.","Typechecks the operation on the given expressions.","Typechecks the operation on the given expression.","Typechecks the operation on the given expression.","Typechecks the operation on the given expressions.","Typechecks the operation on the given expressions.","Typechecks the operation on the given expressions.","Typechecks the operation on the given expressions.","","","","","","","","","","","","","","","","","","","","","","","Evaluate a variable in the current scope.","Calculate the integral value of a variant in an enum.","Create a while statement with this expression as the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse Core and Standard variants of assembly source code. …","Parse LIR code as an LIR expression.","Parse Core and Standard variants of virtual machine source …","A trait for a target architecture to be compiled to.","Implement a compiler for the given target.","Compile the core variant of the machine code (must be …","","Compile the standard variant of the machine code (should …","","C Target","Compile the declaration of a procedure.","Compile an <code>End</code> instruction (with the matching <code>If</code> or <code>While</code> …","Get a value from the given input stream (mode + channel).","The string used for indentation.","The name of the target architecture.","Compile a <code>CoreOp</code> instruction.","Peek a value from the device connected to the program.","Poke a value to the device connected to the program.","The code after the function definitions.","The code after the program ends.","The code after each instruction.","The code before the function definitions.","The code before the program starts.","Put a value to the given output stream (mode + channel).","Compile a <code>StandardOp</code> instruction.","Whether or not the target architecture supports floating …","Whether or not the target architecture supports the given …","Whether or not the target architecture supports the given …","The version of the target architecture.","The type for the C target which implements the <code>Target</code> …","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Store the inverse-cosine of the register (as a float) into …","Store the inverse-sine of the register (as a float) into …","Store the inverse-tangent of the register (as a float) …","Add the value pointed to on the tape to the register.","Add the value pointed to on the tape to the register (as …","Take the value of the register, and allocate that number …","Perform bitwise nand on the cell and the value pointed to …","Calls the nth function defined in the program, where n is …","A comment in the machine code (not in the compiled output).","The interpreter which runs the virtual machine program.","An individual core virtual machine instruction.","Execute a core instruction.","A program of only core virtual machine instructions.","Store the cosine of the register (as a float) into the …","The pointer is made equal to the value pointed to on the …","Create an input / output device for the virtual machine …","Divide the register by the value pointed to on the tape.","Divide the register by the value pointed to on the tape …","Begin an “else” conditional.","End a conditional.","An error generated by the virtual machine.","When the virtual machine attempts to get the program as …","Free the memory pointed to by the register.","Create a new function.","Get a value from an input source and store it in the …","Begin an “if the register is not zero” conditional.","Interpret the register’s value as a pointer to a cell. …","Make the register equal to 1 if the register is …","Make the register equal to the integer 1 if the register …","Move the pointer on the tape by a number of cells.","Multiply the register by the value pointed to on the tape.","Multiply the register by the value pointed to on the tape …","Get a value from the input interface / device and store it …","Write the value of the register to the output interface / …","Store the value of the register (as a float) to the power …","Write the value of the register to an output source.","The last “deref” operation is undone; the pointer is …","Store the remainder of the register and the value pointed …","Store the remainder of the register and the value pointed …","Store the value pointed to on the tape to the register.","Return from the current function.","Store the register to the value pointed to on the tape.","Set the register equal to a constant value.","Set the register equal to a constant floating point value.","Store the sine of the register (as a float) into the …","A device used for standard input and output. This simply …","The interpreter which runs the standard variant of virtual …","An individual standard virtual machine instruction.","A program of core and standard virtual machine …","Subtract the value pointed to on the tape from the …","Subtract the value pointed to on the tape from the …","Store the tangent of the register (as a float) into the …","A device used for testing the compiler. This simply keeps …","Convert the register from an integer to a float.","Convert the register from a float to an integer.","When an instruction is unsupported for a given …","An interface to conveniently create virtual machine …","Store the value of the pointer to the register.","Begin a “while the register is not zero” loop.","A function to reinterpret the bits of an integer as a …","A function to reinterpret the bits of a float as an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Flatten a core program so that all of its functions are …","Flatten a core program so that all of its functions are …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the next input (from a given input source).","","","","Get the code for each function.","Get the code for each function.","Get the code outside of any functions.","Get the code outside of any functions.","Get the code outside of any functions, and the code for …","Get the code outside of any functions, and the code for …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Create a new testing device with some given sample input.","","","","","","Get the output of the testing device as a string (ascii).","","","","","","","Peek a value from the side-effecting device wrapping the …","","","Poke a value into the side-effecting device wrapping the …","","","Put the given value to the given output destination.","","","","","","","Run a core program using this interpreter and its device.","Run a core program using this interpreter and its device.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,0,1,1,1,1,1,0,1,2,1,0,2,1,1,1,1,3,4,5,6,7,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,9,8,9,8,9,8,9,8,9,8,9,8,8,9,9,8,9,8,9,8,9,8,9,8,8,9,9,9,9,9,8,8,9,8,9,8,9,8,9,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,12,13,19,20,21,26,27,28,29,31,32,33,34,35,36,37,38,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,31,32,33,34,35,36,37,51,52,53,54,55,41,40,56,50,56,50,39,40,41,42,43,44,45,46,47,48,49,56,51,52,53,54,55,51,0,57,0,0,0,0,0,0,57,0,57,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,59,60,60,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,62,62,62,62,61,61,62,61,62,61,62,61,62,61,62,61,61,62,62,61,61,62,61,62,61,62,61,61,62,61,61,62,61,62,61,62,61,62,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,64,79,80,79,80,81,82,83,84,85,86,79,80,81,82,83,84,85,86,87,88,88,88,89,0,88,89,90,89,90,88,88,89,88,89,0,89,88,0,88,88,89,88,89,90,88,88,88,89,0,91,89,88,90,88,88,89,88,0,0,88,88,91,90,88,88,89,89,89,89,89,89,88,90,0,0,88,88,89,88,89,89,89,88,89,90,88,88,90,88,91,89,89,89,89,89,89,89,89,88,89,89,89,88,88,88,89,89,89,89,89,88,88,91,89,89,88,88,90,88,88,92,92,90,92,92,91,90,88,89,87,93,94,92,91,90,88,89,87,93,94,93,94,93,92,91,90,88,89,87,93,94,92,91,90,88,89,87,93,94,92,91,90,88,89,87,93,94,92,91,90,88,89,87,93,94,92,92,91,91,90,90,88,88,89,89,87,87,93,93,94,94,92,91,90,88,89,87,93,94,92,91,90,88,89,87,93,94,92,91,90,88,89,87,93,94,93,94,90,88,89,87,93,94,93,94,92,91,90,88,89,87,93,94,93,94,94,94,93,93,93,94,94,94,92,91,90,88,89,87,93,94,92,91,90,88,89,87,93,94,92,91,90,88,89,87,93,93,94,94,92,91,90,88,89,87,93,94,92,91,90,88,89,87,93,94,95,95,95,96,97,98,99,100,101,102,103,104,105,106,107,108,0,109,110,111,0,112,110,109,112,110,111,0,0,110,0,110,112,109,109,112,109,0,0,0,110,0,112,113,110,110,111,113,108,109,0,114,0,0,112,109,0,0,114,114,110,110,112,109,111,111,111,111,111,111,111,111,111,111,111,114,114,109,110,110,110,110,110,110,110,110,110,110,111,111,108,111,109,111,111,112,109,0,114,112,112,0,109,108,112,109,0,0,111,111,110,108,110,0,112,112,0,112,112,110,109,108,112,109,111,0,110,112,110,109,0,0,111,112,0,110,112,110,109,109,111,111,110,110,110,110,112,110,115,116,112,112,112,112,110,110,115,116,117,115,116,112,110,118,108,114,113,107,119,120,121,109,111,117,115,116,112,110,118,108,114,113,107,119,120,121,109,111,122,123,124,125,108,114,113,107,119,120,121,122,122,123,123,124,124,125,125,109,117,115,116,112,110,118,108,114,113,107,119,120,121,109,111,122,123,124,125,108,114,113,107,119,120,121,117,115,116,112,110,118,108,114,113,107,119,120,121,109,111,122,122,123,123,124,124,125,125,126,126,107,126,115,116,112,110,118,122,123,124,125,108,114,113,107,119,120,121,118,109,113,117,117,117,117,117,117,110,110,122,122,123,123,124,124,125,125,113,110,122,123,124,125,115,116,112,110,110,118,109,109,122,123,124,125,112,108,114,113,107,119,120,121,110,117,115,115,116,116,112,112,110,110,118,118,108,108,114,114,113,113,107,107,119,119,120,120,121,121,109,109,111,117,115,116,112,110,110,118,108,114,113,107,119,120,121,109,111,111,110,117,117,118,117,127,127,127,109,128,128,117,128,115,116,112,110,118,117,110,117,110,110,117,115,116,112,110,118,108,114,113,107,119,120,121,109,111,110,110,110,110,110,110,110,110,110,110,110,115,116,115,116,112,118,109,110,118,107,117,110,110,110,112,118,117,110,110,115,116,122,122,123,123,124,124,125,125,108,114,113,107,119,120,121,129,129,112,109,110,110,110,109,117,115,116,112,110,118,108,114,113,107,119,120,121,109,111,115,116,112,110,118,108,114,113,107,119,120,121,109,117,115,116,112,110,118,108,114,113,107,119,120,121,109,111,117,115,116,112,110,118,108,114,113,107,119,120,121,109,111,130,122,122,123,123,124,124,125,125,115,116,112,110,118,109,117,115,116,112,110,118,108,114,113,107,119,120,121,109,111,110,110,109,110,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,136,143,147,143,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,149,150,152,160,161,162,163,164,165,166,167,171,162,163,164,165,166,167,171,164,165,172,172,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,192,193,197,199,200,201,175,177,179,181,184,185,187,188,189,197,181,188,202,203,204,205,206,207,208,209,210,211,202,203,207,210,202,0,0,0,0,0,212,212,212,212,0,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,0,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,215,216,217,217,217,218,217,217,218,218,218,0,0,217,0,217,218,0,218,217,218,218,0,219,217,218,218,218,218,218,217,218,218,217,217,217,217,218,218,218,217,218,218,218,218,217,217,0,0,0,0,218,217,217,0,217,217,219,0,218,218,0,0,220,220,220,220,220,221,222,223,215,218,216,217,224,219,221,222,223,215,218,216,217,224,219,220,215,218,216,217,219,215,218,216,217,219,215,218,220,215,216,220,221,222,215,216,224,220,220,215,218,216,217,219,215,216,215,218,218,216,217,217,224,219,221,222,223,215,218,216,216,217,224,219,225,223,220,224,215,216,215,216,215,216,215,218,220,224,221,222,223,215,218,216,217,224,219,220,220,215,218,216,217,219,221,222,224,224,220,215,216,224,224,224,215,218,216,217,219,225,223,224,225,223,224,225,223,220,224,220,220,220,221,222,220,220,220,215,216,215,218,216,217,219,215,218,216,217,221,222,223,215,218,216,217,224,219,221,222,223,215,218,216,217,224,219,221,222,223,215,218,216,217,224,219,220,226,227,228,229,230,231,232,233,234],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["error",4]],[[["",0],["",0]]],[[["",0],["string",3]]],null,[[["",0],["error",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["error",4]]],[[]],null,[[["",0],["error",4]],["bool",0]],[[["",0],["coreop",4]]],[[["",0],["error",4]],["option",4,[["ordering",4]]]],null,[[["",0],["standardop",4]],["result",4,[["error",4]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["usize",0]],["result",4,[["coreprogram",3],["error",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["coreprogram",3]],[[["",0]],["coreop",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["coreprogram",3]],["ordering",4]],[[["",0],["coreop",4]],["ordering",4]],[[["",0],["coreprogram",3]],["bool",0]],[[["",0],["coreop",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[["",0],["coreprogram",3]],["bool",0]],[[["",0],["coreop",4]],["bool",0]],[[["",0],["coreop",4]]],[[["",0],["coreprogram",3]],["option",4,[["ordering",4]]]],[[["",0],["coreop",4]],["option",4,[["ordering",4]]]],[[]],[[["output",3]]],[[["location",4],["vec",3,[["i64",0]]]]],[[["location",4]]],[[["",0],["standardop",4]],["result",4,[["error",4]]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["location",4]],[[["",0],["",0]]],[[["",0],["location",4]],["ordering",4]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]]],[[["",0]]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["location",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]]],[[]],[[["",0],["input",3],["virtualmachineprogram",8]]],[[["",0],["",0]]],[[["",0],["virtualmachineprogram",8]]],[[]],[[["",0],["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["location",4]],["bool",0]],[[["",0],["i64",0],["virtualmachineprogram",8]]],[[["",0],["virtualmachineprogram",8]]],[[["",0],["i64",0]]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["location",4]],["option",4,[["ordering",4]]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["location",4],["virtualmachineprogram",8]]],[[["",0],["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["i64",0],["virtualmachineprogram",8]]],[[["",0],["location",4],["virtualmachineprogram",8]]],[[["",0],["output",3],["virtualmachineprogram",8]]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]]],[[["",0],["virtualmachineprogram",8]]],[[["",0],["i64",0],["virtualmachineprogram",8]]],[[["",0],["f64",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["virtualmachineprogram",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["usize",0]],["result",4,[["standardprogram",3],["error",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["standardprogram",3]],[[["",0]],["standardop",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["standardprogram",3]],["bool",0]],[[["",0],["standardop",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["coreprogram",3]]],[[]],[[]],[[]],[[["",0],["standardprogram",3]],["bool",0]],[[["",0],["standardop",4]],["bool",0]],[[["",0],["coreop",4]]],[[["",0],["standardprogram",3]],["option",4,[["ordering",4]]]],[[["",0],["standardop",4]],["option",4,[["ordering",4]]]],[[["",0],["standardop",4]],["result",4,[["error",4]]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[]],[[["",0]],["axis",4]],[[["",0]],["direction",4]],[[["",0]],["color",4]],[[["",0]],["inputmode",4]],[[["",0]],["outputmode",4]],[[["",0]],["channel",3]],[[["",0]],["input",3]],[[["",0]],["output",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["axis",4]],["ordering",4]],[[["",0],["direction",4]],["ordering",4]],[[["",0],["color",4]],["ordering",4]],[[["",0],["inputmode",4]],["ordering",4]],[[["",0],["outputmode",4]],["ordering",4]],[[["",0],["channel",3]],["ordering",4]],[[["",0],["input",3]],["ordering",4]],[[["",0],["output",3]],["ordering",4]],[[["",0],["axis",4]],["bool",0]],[[["",0],["direction",4]],["bool",0]],[[["",0],["color",4]],["bool",0]],[[["",0],["inputmode",4]],["bool",0]],[[["",0],["outputmode",4]],["bool",0]],[[["",0],["channel",3]],["bool",0]],[[["",0],["input",3]],["bool",0]],[[["",0],["output",3]],["bool",0]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["",0],["color",4]],["bool",0]],[[["",0],["inputmode",4]],["bool",0]],[[["",0],["outputmode",4]],["bool",0]],[[["",0],["channel",3]],["bool",0]],[[["",0],["input",3]],["bool",0]],[[["",0],["output",3]],["bool",0]],[[["inputmode",4],["usize",0]]],[[["outputmode",4],["usize",0]]],[[["",0],["axis",4]],["option",4,[["ordering",4]]]],[[["",0],["direction",4]],["option",4,[["ordering",4]]]],[[["",0],["color",4]],["option",4,[["ordering",4]]]],[[["",0],["inputmode",4]],["option",4,[["ordering",4]]]],[[["",0],["outputmode",4]],["option",4,[["ordering",4]]]],[[["",0],["channel",3]],["option",4,[["ordering",4]]]],[[["",0],["input",3]],["option",4,[["ordering",4]]]],[[["",0],["output",3]],["option",4,[["ordering",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["vec",3,[["expr",4]]]],["expr",4]],[[["vec",3]]],null,null,[[["env",3]],["result",4,[["bool",0],["error",4]]]],[[["env",3]],["result",4,[["i32",0],["error",4]]]],[[["env",3]],["result",4,[["string",3],["error",4]]]],[[["type",4]]],[[["type",4]]],[[]],null,nulltype",4],["type",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["type",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["type",4],["type",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["type",4],["type",4],["type",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["type",4],["type",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["type",4],["type",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["type",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["type",4],["type",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["type",4],["type",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["type",4],["type",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["type",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["expr",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["expr",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["expr",4],["expr",4],["expr",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["expr",4],["expr",4],["expr",4],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["",0],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0]],["env",3]],[[["",0]],["corebuiltin",3]],[[["",0]],["standardbuiltin",3]],[[["",0]],["constexpr",4]],[[["",0]],["expr",4]],[[["",0]],["procedure",3]],[[["",0]],["arithmetic",4]],[[["",0]],["comparison",4]],[[["",0]],["put",4]],[[["",0]],["assign",3]],[[["",0]],["and",3]],[[["",0]],["or",3]],[[["",0]],["not",3]],[[["",0]],["type",4]],[[["",0]],["error",4]],[[["",0]],["box",3,[["assignop",8]]]],[[["",0]],["box",3,[["unaryop",8]]]],[[["",0]],["box",3,[["binaryop",8]]]],[[["",0]],["box",3,[["ternaryop",8]]]],[[["",0]],["box",3,[["binaryop",8]]]],[[["",0]],["box",3,[["binaryop",8]]]],[[["",0]],["box",3,[["unaryop",8]]]],[[["",0]],["box",3,[["assignop",8]]]],[[["",0]],["box",3,[["binaryop",8]]]],[[["",0]],["box",3,[["binaryop",8]]]],[[["",0]],["box",3,[["unaryop",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["expr",4],["expr",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["",0],["expr",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["",0],["expr",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["",0],["expr",4],["expr",4],["expr",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["",0],["expr",4],["expr",4],["expr",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[],["result",4,[["result",4,[["coreprogram",3],["standardprogram",3]]],["error",4]]]],[[],["result",4,[["result",4,[["coreprogram",3],["standardprogram",3]]],["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["",0],["type",4],["type",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["",0],["type",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["",0],["type",4],["type",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["",0],["type",4],["type",4],["type",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["",0],["type",4],["type",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["",0],["type",4],["type",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["",0],["type",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["",0],["type",4],["type",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["",0],["type",4],["type",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["",0],["type",4],["type",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["",0],["type",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],null,[[["",0],["str",0]],["bool",0]],[[["location",4],["type",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[]],[[["",0],["vec",3]],["result",4,[["usize",0],["error",4]]]],[[["",0],["constexpr",4]]],[[["",0],["procedure",3]]],[[["",0],["type",4]]],[[["",0],["type",4]],["result",4,[["i64",0],["error",4]]]],[[]],[[]],[[["",0],["expr",4],["expr",4]],["string",3]],[[["",0],["expr",4],["expr",4]],["string",3]],[[["",0],["expr",4]],["string",3]],[[["",0],["expr",4]],["string",3]],[[["",0],["expr",4],["expr",4]],["string",3]],[[["",0],["expr",4],["expr",4]],["string",3]],[[["",0],["expr",4],["expr",4],["expr",4]],["string",3]],[[["",0],["expr",4],["expr",4],["expr",4]],["string",3]],[[["location",4],["type",4],["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["corebuiltin",3]],["bool",0]],[[["",0],["standardbuiltin",3]],["bool",0]],[[["",0],["constexpr",4]],["bool",0]],[[]],[[["",0],["",0]],["bool",0]],[[["",0],["procedure",3]],["bool",0]],[[["",0],["type",4]],["bool",0]],[[["",0],["",0],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0],["constexpr",4],["constexpr",4],["env",3]],["result",4,[["constexpr",4],["error",4]]]],[[["",0],["constexpr",4],["env",3]],["result",4,[["constexpr",4],["error",4]]]],[[["",0],["constexpr",4],["constexpr",4],["env",3]],["result",4,[["constexpr",4],["error",4]]]],[[["",0],["constexpr",4],["constexpr",4],["constexpr",4],["env",3]],["result",4,[["constexpr",4],["error",4]]]],[[["env",3]],["result",4,[["error",4]]]],[[["",0],["constexpr",4],["constexpr",4],["env",3]],["result",4,[["constexpr",4],["error",4]]]],[[["",0],["constexpr",4],["constexpr",4],["env",3]],["result",4,[["constexpr",4],["error",4]]]],[[["",0],["constexpr",4],["env",3]],["result",4,[["constexpr",4],["error",4]]]],[[["",0],["constexpr",4],["constexpr",4],["env",3]],["result",4,[["constexpr",4],["error",4]]]],[[["",0],["constexpr",4],["constexpr",4],["env",3]],["result",4,[["constexpr",4],["error",4]]]],[[["",0],["constexpr",4],["constexpr",4],["env",3]],["result",4,[["constexpr",4],["error",4]]]],[[["",0],["constexpr",4],["env",3]],["result",4,[["constexpr",4],["error",4]]]],[[["constexpr",4]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["constexpr",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",4]]],[[]],[[["",0]],["usize",0]],[[["",0],["str",0]],["option",4,[["constexpr",4]]]],[[["",0]],["str",0]],[[["",0],["str",0]],["option",4,[["procedure",3]]]],[[["",0],["env",3]],["result",4,[["usize",0],["error",4]]]],[[["",0],["env",3]],["result",4,[["usize",0],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["usize",0],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["usize",0],["error",4]]]],[[["",0],["env",3]],["result",4,[["type",4],["error",4]]]],[[["",0],["env",3]],["result",4,[["type",4],["error",4]]]],[[["",0],["str",0]],["option",4,[["type",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["type",4],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["type",4],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["type",4],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["type",4],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["type",4],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["type",4],["error",4]]]],[[["",0],["str",0]],["option",4]],[[]],[[["",0],["str",0]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["constexpr",4]]],[[["vec",3]]],[[["procedure",3]]],[[["btreemap",3,[["str",0],["procedure",3]]]]],[[["type",4]]],[[["vec",3]]],[[["option",4,[["type",4]]]]],[[["vec",3]]],[[]],[[]],null,null,[[["",0],["corebuiltin",3]],["bool",0]],[[["",0],["standardbuiltin",3]],["bool",0]],[[["",0],["constexpr",4]],["bool",0]],[[["",0],["procedure",3]],["bool",0]],[[["",0],["type",4]],["bool",0]],[[]],[[["vec",3],["type",4]]],[[]],[[["",0]]],[[]],[[]],[[]],[[["vec",3],["type",4]]],[[["",0],["assemblyprogram",8]]],[[["",0],["str",0],["assemblyprogram",8]],["result",4,[["error",4]]]],[[]],[[]],null,null,[[["",0],["expr",4],["expr",4],["env",3]],["result",4,[["type",4],["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3]],["result",4,[["type",4],["error",4]]]],[[["",0],["expr",4],["env",3]],["result",4,[["type",4],["error",4]]]],[[["",0],["expr",4],["env",3]],["result",4,[["type",4],["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3]],["result",4,[["type",4],["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3]],["result",4,[["type",4],["error",4]]]],[[["",0],["expr",4],["expr",4],["expr",4],["env",3]],["result",4,[["type",4],["error",4]]]],[[["",0],["expr",4],["expr",4],["expr",4],["env",3]],["result",4,[["type",4],["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3]],["result",4,[["type",4],["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3]],["result",4,[["type",4],["error",4]]]],[[["",0],["expr",4],["env",3]],["result",4,[["type",4],["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3]],["result",4,[["type",4],["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3]],["result",4,[["type",4],["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3]],["result",4,[["type",4],["error",4]]]],[[["",0],["expr",4],["env",3]],["result",4,[["type",4],["error",4]]]],[[["env",3]],["result",4,[["error",4]]]],[[["env",3],["usize",0]],["result",4,[["error",4]]]],[[["env",3],["usize",0]],["result",4,[["error",4]]]],[[["env",3],["usize",0]],["result",4,[["error",4]]]],[[]],[[["btreemap",3,[["str",0]]]]],[[]],[[["",0],["str",0],["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0],["env",3]],["result",4,[["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3]],["result",4,[["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3]],["result",4,[["error",4]]]],[[["",0],["expr",4],["env",3]],["result",4,[["error",4]]]],[[["",0],["expr",4],["env",3]],["result",4,[["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3]],["result",4,[["error",4]]]],[[["",0],["expr",4],["expr",4],["env",3]],["result",4,[["error",4]]]],[[["",0],["expr",4],["expr",4],["expr",4],["env",3]],["result",4,[["error",4]]]],[[["",0],["expr",4],["expr",4],["expr",4],["env",3]],["result",4,[["error",4]]]],[[["",0],["env",3]],["result",4,[["error",4]]]],[[["",0],["env",3]],["result",4,[["error",4]]]],[[["",0],["env",3]],["result",4,[["error",4]]]],[[["",0],["env",3]],["result",4,[["error",4]]]],[[["",0],["env",3]],["result",4,[["error",4]]]],[[["",0],["env",3]],["result",4,[["error",4]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[["vec",3],["string",3]],["option",4,[["usize",0]]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4,[["result",4,[["coreprogram",3],["standardprogram",3]]],["string",3]]]],[[],["result",4,[["expr",4],["string",3]]]],[[],["result",4,[["result",4,[["coreprogram",3],["standardprogram",3]]],["string",3]]]],null,null,[[["",0],["coreprogram",3]],["result",4,[["string",3],["string",3]]]],[[["",0],["coreop",4],["vec",3],["vec",3],["usize",0],["usize",0]],["result",4,[["string",3],["string",3]]]],[[["",0],["standardprogram",3]],["result",4,[["string",3],["string",3]]]],[[["",0],["standardop",4],["vec",3],["vec",3],["usize",0],["usize",0]],["result",4,[["string",3],["string",3]]]],null,[[["",0],["usize",0]],["string",3]],[[["",0],["coreop",4],["option",4,[["usize",0]]]],["string",3]],[[["",0],["input",3]],["result",4,[["string",3],["string",3]]]],[[["",0]],["option",4,[["string",3]]]],[[["",0]],["str",0]],[[["",0],["coreop",4]],["string",3]],[[["",0]],["result",4,[["string",3],["string",3]]]],[[["",0]],["result",4,[["string",3],["string",3]]]],[[["",0],["vec",3,[["i32",0]]]],["option",4,[["string",3]]]],[[["",0],["bool",0]],["option",4,[["string",3]]]],[[["",0]],["option",4,[["string",3]]]],[[["",0],["vec",3,[["i32",0]]]],["option",4,[["string",3]]]],[[["",0],["bool",0]],["option",4,[["string",3]]]],[[["",0],["output",3]],["result",4,[["string",3],["string",3]]]],[[["",0],["standardop",4]],["result",4,[["string",3],["string",3]]]],[[["",0]],["bool",0]],[[["",0],["input",3]],["bool",0]],[[["",0],["output",3]],["bool",0]],[[["",0]],["str",0]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["usize",0]],["string",3]],[[["",0],["coreop",4],["option",4,[["usize",0]]]],["string",3]],[[]],[[["",0],["input",3]],["result",4,[["string",3],["string",3]]]],[[]],[[["",0]],["str",0]],[[["",0],["coreop",4]],["string",3]],[[["",0]],["result",4,[["string",3],["string",3]]]],[[["",0]],["result",4,[["string",3],["string",3]]]],[[["",0],["vec",3,[["i32",0]]]],["option",4,[["string",3]]]],[[["",0],["bool",0]],["option",4,[["string",3]]]],[[["",0]],["option",4,[["string",3]]]],[[["",0],["bool",0]],["option",4,[["string",3]]]],[[["",0],["output",3]],["result",4,[["string",3],["string",3]]]],[[["",0],["standardop",4]],["result",4,[["string",3],["string",3]]]],[[["",0]],["bool",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["str",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["i64",0]],["f64",0]],[[["f64",0]],["i64",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["coreprogram",3]],[[["",0]],["coreop",4]],[[["",0]],["standardprogram",3]],[[["",0]],["standardop",4]],[[["",0]],["error",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["coreprogram",3]],["ordering",4]],[[["",0],["coreop",4]],["ordering",4]],[[["",0]],["result",4,[["coreprogram",3],["standardprogram",3]]]],[[["",0]],["result",4,[["coreprogram",3],["standardprogram",3]]]],[[["",0]],["result",4,[["coreprogram",3],["standardprogram",3]]]],[[["",0],["str",0]]],[[]],[[]],[[],["coreprogram",3]],[[],["standardprogram",3]],[[],["testingdevice",3]],[[["",0]]],[[["",0]]],[[["",0],["coreprogram",3]],["bool",0]],[[["",0],["coreop",4]],["bool",0]],[[["",0],["standardprogram",3]],["bool",0]],[[["",0],["standardop",4]],["bool",0]],[[["",0],["error",4]],["bool",0]],[[]],[[]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["coreprogram",3]]],[[]],[[]],[[]],[[]],[[["",0],["input",3]],["result",4,[["i64",0],["string",3]]]],[[["",0],["input",3]],["result",4,[["i64",0],["string",3]]]],[[["",0],["input",3]]],[[["",0],["input",3]],["result",4,[["i64",0],["string",3]]]],[[["",0]],["hashmap",3,[["i32",0],["vec",3,[["coreop",4]]]]]],[[["",0]],["hashmap",3,[["i32",0],["vec",3,[["standardop",4]]]]]],[[["",0]],["vec",3,[["coreop",4]]]],[[["",0]],["vec",3,[["standardop",4]]]],[[]],[[]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0],["i64",0]]],[[["",0],["coreprogram",3]],["bool",0]],[[["",0],["coreop",4]],["bool",0]],[[["",0],["standardprogram",3]],["bool",0]],[[["",0],["standardop",4]],["bool",0]],[[["",0],["error",4]],["bool",0]],[[]],[[]],[[]],[[["vec",3,[["i64",0]]]]],[[["",0],["coreop",4]]],[[["",0],["coreop",4]]],[[["",0],["coreop",4]]],null,[[["",0]],["string",3]],[[["",0]],["vec",3,[["i64",0]]]],[[["",0],["coreprogram",3]],["option",4,[["ordering",4]]]],[[["",0],["coreop",4]],["option",4,[["ordering",4]]]],[[["",0],["standardprogram",3]],["option",4,[["ordering",4]]]],[[["",0],["standardop",4]],["option",4,[["ordering",4]]]],[[["",0],["error",4]],["option",4,[["ordering",4]]]],[[["",0]],["result",4,[["i64",0],["string",3]]]],[[["",0]],["result",4,[["i64",0],["string",3]]]],[[["",0]],["result",4,[["i64",0],["string",3]]]],[[["",0],["i64",0]],["result",4,[["string",3]]]],[[["",0],["i64",0]],["result",4,[["string",3]]]],[[["",0],["i64",0]],["result",4,[["string",3]]]],[[["",0],["i64",0],["output",3]],["result",4,[["string",3]]]],[[["",0],["i64",0],["output",3]],["result",4,[["string",3]]]],[[["",0],["output",3]]],[[["",0],["i64",0],["output",3]],["result",4,[["string",3]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["coreprogram",3]],["result",4,[["string",3]]]],[[["standardprogram",3]],["result",4,[["string",3]]]],[[["",0]]],[[["",0],["i64",0]]],[[["",0],["standardop",4]],["result",4,[["error",4]]]],[[["",0],["standardop",4]],["result",4,[["error",4]]]],[[["",0],["standardop",4]],["result",4,[["error",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]]],null,null,null,null,null,null,null,null,null],"p":[[4,"Error"],[8,"AssemblyProgram"],[13,"VirtualMachineError"],[13,"UnsupportedInstruction"],[13,"UndefinedLabel"],[13,"Unmatched"],[13,"Unexpected"],[3,"CoreProgram"],[4,"CoreOp"],[13,"Comment"],[13,"Many"],[13,"Set"],[13,"SetLabel"],[13,"Call"],[13,"CallLabel"],[13,"Fn"],[13,"While"],[13,"If"],[13,"Swap"],[13,"Next"],[13,"Prev"],[13,"Inc"],[13,"Dec"],[13,"Neg"],[13,"Not"],[13,"Push"],[13,"Pop"],[13,"Get"],[13,"Put"],[13,"BitwiseNot"],[13,"Compare"],[13,"IsGreater"],[13,"IsGreaterEqual"],[13,"IsLess"],[13,"IsLessEqual"],[13,"IsEqual"],[13,"IsNotEqual"],[13,"GetAddress"],[13,"Move"],[13,"Copy"],[13,"Index"],[13,"Add"],[13,"Sub"],[13,"Mul"],[13,"Div"],[13,"Rem"],[13,"DivRem"],[13,"And"],[13,"Or"],[13,"PopFrom"],[13,"Array"],[13,"BitwiseNand"],[13,"BitwiseXor"],[13,"BitwiseOr"],[13,"BitwiseAnd"],[13,"PushTo"],[4,"Location"],[13,"Address"],[13,"Indirect"],[13,"Offset"],[3,"StandardProgram"],[4,"StandardOp"],[13,"CoreOp"],[13,"Set"],[13,"ToFloat"],[13,"ToInt"],[13,"Sqrt"],[13,"Neg"],[13,"Sin"],[13,"Cos"],[13,"Tan"],[13,"ASin"],[13,"ACos"],[13,"ATan"],[13,"Alloc"],[13,"Free"],[13,"Peek"],[13,"Poke"],[13,"IsGreater"],[13,"IsLess"],[13,"Pow"],[13,"Add"],[13,"Sub"],[13,"Mul"],[13,"Div"],[13,"Rem"],[3,"Channel"],[4,"InputMode"],[4,"OutputMode"],[4,"Color"],[4,"Direction"],[4,"Axis"],[3,"Input"],[3,"Output"],[13,"RGB"],[13,"DPad"],[13,"JoyStick"],[13,"Accelerometer"],[13,"Gyroscope"],[13,"Magnetometer"],[13,"Speedometer"],[13,"Position"],[13,"Custom"],[13,"SetCursorChar"],[13,"SetCursorPixel"],[13,"Custom"],[3,"Assign"],[4,"Arithmetic"],[4,"Type"],[4,"Expr"],[4,"Error"],[4,"ConstExpr"],[4,"Put"],[4,"Comparison"],[3,"CoreBuiltin"],[3,"StandardBuiltin"],[3,"Env"],[3,"Procedure"],[3,"And"],[3,"Or"],[3,"Not"],[8,"AssignOp"],[8,"UnaryOp"],[8,"BinaryOp"],[8,"TernaryOp"],[8,"Compile"],[8,"GetSize"],[8,"GetType"],[8,"Simplify"],[8,"TypeCheck"],[13,"Symbol"],[13,"Int"],[13,"Float"],[13,"Char"],[13,"Bool"],[13,"Of"],[13,"TypeOf"],[13,"SizeOfType"],[13,"SizeOfExpr"],[13,"Tuple"],[13,"Array"],[13,"Struct"],[13,"Union"],[13,"CoreBuiltin"],[13,"StandardBuiltin"],[13,"Proc"],[13,"As"],[13,"AssemblyError"],[13,"VariantNotFound"],[13,"MemberNotFound"],[13,"RecursionDepthConst"],[13,"RecursionDepthTypeEquality"],[13,"NonIntegralConst"],[13,"UnsizedType"],[13,"DerefNonPointer"],[13,"ApplyNonProc"],[13,"NonSymbol"],[13,"InvalidIndex"],[13,"InvalidRefer"],[13,"InvalidUnaryOp"],[13,"InvalidUnaryOpTypes"],[13,"InvalidBinaryOp"],[13,"InvalidBinaryOpTypes"],[13,"InvalidTernaryOp"],[13,"InvalidTernaryOpTypes"],[13,"InvalidAssignOp"],[13,"InvalidAssignOpTypes"],[13,"SymbolNotDefined"],[13,"TypeNotDefined"],[13,"NegativeArrayLength"],[13,"InvalidAs"],[13,"MismatchedTypes"],[13,"ConstExpr"],[13,"Many"],[13,"LetConst"],[13,"LetConsts"],[13,"LetProc"],[13,"LetProcs"],[13,"LetType"],[13,"LetTypes"],[13,"LetVar"],[13,"LetVars"],[13,"While"],[13,"If"],[13,"When"],[13,"UnaryOp"],[13,"BinaryOp"],[13,"TernaryOp"],[13,"AssignOp"],[13,"Refer"],[13,"Deref"],[13,"DerefMut"],[13,"Apply"],[13,"Return"],[13,"Array"],[13,"Tuple"],[13,"Union"],[13,"Struct"],[13,"As"],[13,"Member"],[13,"Index"],[13,"Let"],[13,"Unit"],[13,"Symbol"],[13,"Enum"],[13,"Tuple"],[13,"Array"],[13,"Struct"],[13,"Union"],[13,"Proc"],[13,"Pointer"],[8,"CompiledTarget"],[8,"Architecture"],[3,"C"],[3,"CoreProgram"],[3,"StandardProgram"],[4,"StandardOp"],[4,"CoreOp"],[4,"Error"],[8,"VirtualMachineProgram"],[3,"CoreInterpreter"],[3,"StandardInterpreter"],[3,"StandardDevice"],[3,"TestingDevice"],[8,"Device"],[13,"Comment"],[13,"Set"],[13,"Move"],[13,"Get"],[13,"Put"],[13,"UnsupportedInstruction"],[13,"ExpectedCore"],[13,"CoreOp"],[13,"Set"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};