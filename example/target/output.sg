let mut buf = ['\0'] * 8192;
let mut is_done = False;

extern def append(file: &Char, buf: &Char): Bool;
extern def write(file: &Char, buf: &Char): Bool;
extern def read(file: &Char, buf: &Char): Bool;
extern def copy(src: &Char, dest: &Char): Bool;
extern def exists(file: &Char): Bool;
extern def size(file: &Char): Int;
extern def info(msg: &Char);
extern def warn(msg: &Char);
extern def error(msg: &Char);
extern def system(cmd: &Char): Bool;

def append_file_to_file(src: &Char, dest: &Char) {
    if exists(src) {
        let mut data = alloc(size(src));
        if read(src, data) {
            let _ = append(dest, data);
            let _ = append(dest, &"\n\n");
        }
    }
}

if exists(&"ffi.h") {
    if write(&"out.c", &"#ifndef SAGE_SETUP
#define SAGE_SETUP
#include <stdlib.h>
#include <stdint.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

typedef union cell {
    int64_t i;
    double f;
    union cell *p;
} cell;

cell tape[200000], *refs[1024], *ptr = tape, **ref = refs, reg, ffi_channel[256], *ffi_ptr = ffi_channel;

unsigned int ref_ptr = 0;
void (*funs[10000])(void);
#endif\n\n") {
        append_file_to_file(&"ffi.h", &"out.c");
    } else {
        error(&"Failed to write to out.c");
        is_done = True;
    }
} else {
    warn(&"ffi.h does not exist, so it cannot be copied to out.c");
    if !(write(&"out.c", &"")) {
        error(&"Failed to write to out.c");
        is_done = True;
    }
}


info(&"Writing to out.c...");
buf[sizeof(buf) - 1] = '\0';
while !is_done {
    for let mut i=0; i<sizeof(buf) - 1; i+=1 {
        input(&mut (buf[i]));
    }
    if (buf[sizeof(buf) - 2] == '\0') {
        is_done = True;
    }
    if !(append(&"out.c", &buf)) {
        error(&"Failed to write to out.c");
        is_done = True;
    }
}

if exists(&"out.c") {
    if system(&"gcc -o out out.c -lm") {
        info(&"Compiled out.c to out");
        let _ = system(&"rm out.c");
        let _ = system(&"./out");
    } else {
        error(&"Failed to compile out.c to out");
    }
} else {
    error(&"out.c does not exist, so it cannot be compiled to output executable");
}